import logging
import traceback
from tempfile import NamedTemporaryFile
from string import Template as StringTemplate

from decouple import config
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

from mindee import ClientV2, InferencePredictOptions
from mindee.parsing.v2 import InferenceResponse
from openai import OpenAI

# Load tokens
TG_TOKEN = config("TELEGRAM_TOKEN")
MINDEE_API_KEY = config("MINDEE_API_KEY")
VEHICLE_MODEL_ID = config("VEHICLE_MODEL_ID")
PASSPORT_MODEL_ID = config("PASSPORT_MODEL_ID")
AI_TOKEN = config("OPEN_ROUTER_API")

# Initialize clients
mindee_client = ClientV2(MINDEE_API_KEY)
ai_client = OpenAI(
  base_url="https://openrouter.ai/api/v1",
  api_key=f"{AI_TOKEN}",
)

# State definitions
ASK_PASSPORT, ASK_CAR_DOC, CONFIRM_DATA, PRICE_CONFIRM, PRICE_RECONFIRM, AFTER_POLICY = range(6)

# In-memory data
user_data_storage = {}

# Logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)


# Starting message
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è.\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, *—Ñ–æ—Ç–æ –≤–∞—à–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞*.\n\n"
        "–Ø–∫—â–æ –ø–æ–º–∏–ª–∏–ª–∏—Å—è ‚Äî –≤–≤–µ–¥—ñ—Ç—å /cancel.",
        parse_mode="Markdown"
    )
    return ASK_PASSPORT


# Additional AI interactions
async def answer_user_question_with_ai(user_question: str) -> str:
    try:
        system_message = (
            "–¢–∏ ‚Äî –≤–≤—ñ—á–ª–∏–≤–∏–π Telegram-–±–æ—Ç (–ê–ª–µ –Ω–µ –Ω–∞–¥–æ, —Ç–æ–±—Ç–æ –±–µ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –µ–º–æ–¥–∑—ñ), —â–æ –¥–æ–ø–æ–º–∞–≥–∞—î –ª—é–¥—è–º –∫—É–ø–∏—Ç–∏ –∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è. "
            "–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –ø–æ—è—Å–Ω–∏—Ç–∏, —á–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ —ñ —á–æ–º—É —Ç—Ä–µ–±–∞ —Å–∞–º–µ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç—É —Ç–∞/–∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ –∞–≤—Ç–æ, –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ—Å—Ç–æ—é —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, "
            "—ñ –≤–≤—ñ—á–ª–∏–≤–æ –Ω–∞–≥–∞–¥–∞—Ç–∏, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≤–∏–Ω–µ–Ω –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ."
        )
        user_prompt = (
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø–∏—Ç–∞–≤: \"{user_question}\"\n"
            f"–Ø–∫ –±–∏ —Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–≤, —è–∫—â–æ –∑–∞—Ä–∞–∑ –±–æ—Ç –æ—á—ñ–∫—É—î, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –∞–±–æ –∞–≤—Ç–æ (–±–µ–∑ –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å)?"
        )

        response = ai_client.chat.completions.create(
            model="deepseek/deepseek-r1:free",
            messages=[
                {"role": "system", "content": system_message},
                {"role": "user", "content": user_prompt},
            ],
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print("AI error:", e)
        return "–í–∏–±–∞—á—Ç–µ, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."


# Additional AI interactions
async def ask_ai_about_price():
    try:
        response = ai_client.chat.completions.create(
            model="deepseek/deepseek-r1:free",
            messages=[
                {
                    "role": "system",
                    "content": "–¢–∏ –≤–≤—ñ—á–ª–∏–≤–∏–π —Å—Ç—Ä–∞—Ö–æ–≤–∏–π –±–æ—Ç, –∞–ª–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –µ–º–æ–¥–∑—ñ. –ü–æ—è—Å–Ω–∏, —á–æ–º—É —Ü—ñ–Ω–∞ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ ‚Äî –¥—É–∂–µ –∫–æ—Ä–æ—Ç–∫–æ —Ç–∞ –Ω–µ –¥–æ–∑–≤–æ–ª—è–π —Ç–æ–≥—Ä—É–≤–∞—Ç–∏—Å—è (—â–æ—Å—å –Ω–∞–∫—à—Ç–∞–ª—Ç –≤ –∫–æ–º–ø–∞–Ω—ñ—ó –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —ñ–Ω—à–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤), —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.",
                },
                {
                    "role": "user",
                    "content": "–ß–æ–º—É —Ü—ñ–Ω–∞ –Ω–∞ –∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞?",
                }
            ],
        )
        return response.choices[0].message.content.strip()

    except Exception as e:
        print("AI error:", e)
        return "–¶—ñ–Ω–∞, –Ω–∞ –∂–∞–ª—å, —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω–∏–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤."


# Downloading photo
async def download_photo(file, context):
    tg_file = await context.bot.get_file(file.file_id)
    with NamedTemporaryFile(delete=False, suffix=".jpg") as f:
        await tg_file.download_to_drive(custom_path=f.name)
        return f.name


# Extracting passport data using Mindee API
def extract_passport_data(image_path):
    try:
        input_source = mindee_client.source_from_path(image_path)
        options = InferencePredictOptions(model_id=PASSPORT_MODEL_ID, rag=False)
        response: InferenceResponse = mindee_client.enqueue_and_parse(input_source, options)
        fields = response.inference.result.fields

        surnames_field = fields.get("surnames")
        given_names_field = fields.get("given_names")
        passport_number_field = fields.get("passport_number")

        surnames = surnames_field.value if surnames_field else ""
        given_names = given_names_field.value if given_names_field else ""

        full_name = (given_names + " " + surnames).strip() or "Unknown"
        passport_number = passport_number_field.value if passport_number_field else "Unknown"

        return {
            "full_name": full_name,
            "passport_number": passport_number
        }

    except Exception as e:
        print("Mindee passport extraction error:", e)
        return {
            "full_name": "Unknown",
            "passport_number": "Unknown"
        }


# Extracting vin data using Mindee API
def extract_vehicle_data(image_path):
    try:
        input_source = mindee_client.source_from_path(image_path)

        options = InferencePredictOptions(
            model_id=VEHICLE_MODEL_ID,
            rag=False,
        )

        response: InferenceResponse = mindee_client.enqueue_and_parse(input_source, options)

        fields = response.inference.result.fields
        print("VEHICLE fields:", fields)

        car_model_field = fields.get("car_model")
        car_model = car_model_field.value if car_model_field else "Unknown"

        car_brand_field = fields.get("car_brand")
        car_brand = car_brand_field.value if car_brand_field else "Unknown"

        vin_number_field = fields.get("vin_number")
        vin_number = vin_number_field.value if vin_number_field else "Unknown"

        return {
            "car_brand": car_brand,
            "car_model": car_model,
            "vin_number": vin_number
        }

    except Exception as e:
        print("Mindee vehicle extraction error:", e)
        return {
            "car_brand": "Unknown",
            "car_model": "Unknown",
            "vin_number": "Unknown"
        }


# Receiving passport data
async def receive_passport(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1]
    image_path = await download_photo(photo, context)

    extracted = extract_passport_data(image_path)

    user_data_storage[update.message.from_user.id] = {
        "passport_photo": image_path,
        "extracted": extracted
    }

    await update.message.reply_text("–î—è–∫—É—é! –¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ –∞–≤—Ç–æ.")
    return ASK_CAR_DOC


# Receiving vin data
async def receive_car_doc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1]
    image_path = await download_photo(photo, context)
    car_data = extract_vehicle_data(image_path)

    user_id = update.message.from_user.id
    user_data_storage[user_id]["car_doc"] = image_path
    user_data_storage[user_id]["extracted"].update(car_data)

    data = user_data_storage[user_id]["extracted"]

    confirmation_msg = (
        f"–û—Å—å —â–æ —è –∑–Ω–∞–π—à–æ–≤:\n"
        f"üë§ –Ü–º'—è: {data.get('full_name', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
        f"üìÑ –ü–∞—Å–ø–æ—Ä—Ç: {data.get('passport_number', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
        f"üöó –ê–≤—Ç–æ: {data.get('car_brand', '–ù–µ–≤—ñ–¥–æ–º–æ')} {data.get('car_model', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
        f"üîß VIN: {data.get('vin_number', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n\n"
        "–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?"
    )
    reply_keyboard = [["–¢–∞–∫", "–ù—ñ"]]
    await update.message.reply_text(
        confirmation_msg,
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
    )
    return CONFIRM_DATA


# Data confirmation logic
async def confirm_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() == "—Ç–∞–∫":
        reply_keyboard = [["–¢–∞–∫", "–ù—ñ"]]
        await update.message.reply_text("–¶—ñ–Ω–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å 100 USD. –ü—Ä–∏–π–º–∞—î—Ç–µ?",
                                        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True))
        return PRICE_CONFIRM
    else:
        await update.message.reply_text("–û–∫–µ–π, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ —â–µ —Ä–∞–∑.")
        return ASK_PASSPORT


# Price confirmation logic
async def handle_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.lower()

    if "—á–æ–º—É" in user_text or "–º–æ–∂–Ω–∞" in user_text or "–¥–µ—à–µ–≤" in user_text:
        explanation = await ask_ai_about_price()
        await update.message.reply_text(explanation)
        reply_keyboard = [["–¢–∞–∫", "–ù—ñ"]]
        await update.message.reply_text(
            "–¢–µ–ø–µ—Ä –≤–∏ –∑–≥–æ–¥–Ω—ñ –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∑–∞ 100 USD?",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
        )
        return PRICE_CONFIRM

    if user_text == "—Ç–∞–∫":
        return await issue_policy(update, context)
    else:
        reply_keyboard = [["–¢–∞–∫", "–ù—ñ"]]
        await update.message.reply_text(
            "–í–∏–±–∞—á—Ç–µ, –∞–ª–µ –Ω–∞ –∂–∞–ª—å, —Ü—ñ–Ω–∞ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ (100 USD). –ó–≥–æ–¥–Ω—ñ?",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
        )
        return PRICE_RECONFIRM


# Continuation of confirmation logic
async def handle_reconfirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.lower().strip()

    if user_input in ["—Ç–∞–∫", "–∑–≥–æ–¥–µ–Ω", "–¥–æ–±—Ä–µ", "–æ–∫"]:
        return await issue_policy(update, context)

    elif user_input in ["–Ω—ñ", "–Ω–µ –∑–≥–æ–¥–µ–Ω", "–Ω—ñ—Ç"]:
        await update.message.reply_text("–î–æ–±—Ä–µ. –°–ø–æ–¥—ñ–≤–∞—é—Å—è –ø–æ–±–∞—á–∏—Ç–∏ –≤–∞—Å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É!")
        return ConversationHandler.END

    else:
        try:
            prompt = (
                f"–ö–ª—ñ—î–Ω—Ç –ø–∏—Ç–∞—î: '{user_input}'. "
                "–ü–æ—è—Å–Ω–∏ –∫–æ—Ä–æ—Ç–∫–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, —á–æ–º—É —Ü—ñ–Ω–∞ –Ω–∞ –∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ ‚Äî 100 USD. "
                "–°–∫–∞–∂–∏, —â–æ —Ü–µ –±–∞–∑–æ–≤–∏–π –ø–æ–ª—ñ—Å —ñ –≤—ñ–Ω –æ—Ö–æ–ø–ª—é—î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Ä–∏–∑–∏–∫–∏. "
                "–ù–µ –∑–º—ñ–Ω—é–π —Ü—ñ–Ω—É, –∞–ª–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –¥–æ–±—Ä–æ–∑–∏—á–ª–∏–≤–æ."
            )

            ai_response = ai_client.chat.completions.create(
                model="deepseek/deepseek-r1:free",
                messages=[
                    {"role": "system", "content": "–¢–∏ ‚Äî –≤–≤—ñ—á–ª–∏–≤–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é."},
                    {"role": "user", "content": prompt}
                ]
            )

            answer = ai_response.choices[0].message.content.strip()
            await update.message.reply_text(answer)

            reply_keyboard = [["–¢–∞–∫", "–ù—ñ"]]
            await update.message.reply_text(
                "–ü—ñ—Å–ª—è –ø–æ—è—Å–Ω–µ–Ω–Ω—è, –≤–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å –Ω–∞ –ø–æ–ª—ñ—Å –∑–∞ 100 USD?",
                reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
            )
            return PRICE_RECONFIRM

        except Exception as e:
            logging.error(f"AI error in reconfirm: {e}")
            await update.message.reply_text("–ù–∞ –∂–∞–ª—å, –∑–∞—Ä–∞–∑ –Ω–µ –º–æ–∂—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —Ç—Ä–æ—Ö–∏ –ø—ñ–∑–Ω—ñ—à–µ.")
            return PRICE_RECONFIRM


# Sending the result
async def issue_policy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = user_data_storage[update.message.from_user.id]["extracted"]

    template_text = """
–°—Ç—Ä–∞—Ö–æ–≤–∏–π –ü–æ–ª—ñ—Å

–Ü–º'—è –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–æ–≥–æ: $full_name
–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞: $passport_number
–ê–≤—Ç–æ–º–æ–±—ñ–ª—å: $car_brand $car_model
VIN: $vin_number

–°—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏: 100 USD

–¶–µ–π –¥–æ–∫—É–º–µ–Ω—Ç —î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è.
    """
    template = StringTemplate(template_text)
    policy_text = template.substitute(
        full_name=data.get("full_name", "Unknown"),
        passport_number=data.get("passport_number", "Unknown"),
        car_brand=data.get("car_brand", "Unknown"),
        car_model=data.get("car_model", "Unknown"),
        vin_number=data.get("vin_number", "Unknown"),
    )

    await update.message.reply_text("‚úÖ –°—Ç—Ä–∞—Ö–æ–≤–∏–π –ø–æ–ª—ñ—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ. –û—Å—å –≤–∞—à –¥–æ–∫—É–º–µ–Ω—Ç:")
    await update.message.reply_text(policy_text.strip())

    reply_keyboard = [["–î—è–∫—É—é", "–°—Ç–≤–æ—Ä–∏—Ç–∏ —â–µ –æ–¥–∏–Ω –ø–æ–ª—ñ—Å"]]
    await update.message.reply_text(
        "–ë–∞–∂–∞—î—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —â–µ –æ–¥–∏–Ω —Å—Ç—Ä–∞—Ö–æ–≤–∏–π –ø–æ–ª—ñ—Å?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
    )
    return AFTER_POLICY


# Alternative ending
async def after_policy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if "–¥—è–∫—É—é" in text:
        await update.message.reply_text("–î—è–∫—É—é –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞! –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ.")
        return ConversationHandler.END
    else:
        return await start(update, context)


# /cancel command logic
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ. –î–ª—è –ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å /start")
    return ConversationHandler.END


# Unscripted user input
async def handle_unexpected_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.lower()
    if any(word in user_message for word in ["–Ω–∞–≤—ñ—â–æ", "—á–æ–º—É", "–¥–ª—è —á–æ–≥–æ", "–∞ —è–∫—â–æ", "—á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ"]):
        ai_reply = await answer_user_question_with_ai(update.message.text)
        await update.message.reply_text(ai_reply)
    else:
        await update.message.reply_text("–Ø –æ—á—ñ–∫—É—é —Ñ–æ—Ç–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ, —è–∫ –±—É–ª–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ.")


# In case of errors
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logging.error("Unhandled exception: %s", traceback.format_exc())
    if isinstance(update, Update) and update.message:
        await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞(( –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å /start")


# Running the bot
if __name__ == "__main__":
    app = ApplicationBuilder().token(TG_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_PASSPORT: [
                MessageHandler(filters.PHOTO, receive_passport),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_unexpected_input),
            ],
            ASK_CAR_DOC: [
                MessageHandler(filters.PHOTO, receive_car_doc),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_unexpected_input),
            ],
            CONFIRM_DATA: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_data)],
            PRICE_CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_price)],
            PRICE_RECONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_reconfirm)],
            AFTER_POLICY: [MessageHandler(filters.TEXT & ~filters.COMMAND, after_policy)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_error_handler(error_handler)
    app.run_polling()